[
	{
		"slug": "theme-challenge",
		"siteXtensionType": "php",
		"title": "outer banks vacation rentals",
		"subtitle": "Theming, CSS frameworks, and replication.",
		"htmlContent": [
			{
				"tag": "p",
				"content": "Each student in the Design for the Web course recently completed a week-long \"responsive theme challenge\"."
			},
			{
				"tag": "p",
				"content": "This project tied together many elements we'd been studying in the course up to this point:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "HTML structure; the \"hierarchy\" of elements;"
					},
					{
						"tag": "li",
						"content": "CSS - work with responsive elements, section spacing, color choices, typography, and making a \"unified whole\" or \"unified statement\""
					},
					{
						"tag": "li",
						"content": "PHP - creating associative arrays and pulling the data to be used for dynamic content (section) creation"
					},
					{
						"tag": "li",
						"content": "Time was a factor; we were given six days to complete the project."
					}
				]
			},
			{
				"tag": "h3",
				"content": "Day 1"
			},
			{
				"tag": "p",
				"content": "As an individual exercise both in in site layout and getting familiar with the tools and languages to be used in the project, each student wrote out all of the code needed to recreate a sample responsive layout as accurately as possible."
			},
			{
				"tag": "h3",
				"content": "Day 2"
			},
			{
				"tag": "p",
				"content": "We reviewed the code from this initial exercise with the instructor to check for understanding and accuracy."
			},
			{
				"tag": "h3",
				"content": "Day 3"
			},
			{
				"tag": "p",
				"content": "We chose an industry or \"niche\" to research. The idea was to gather in one place as many visual tricks and layout elements that were common to all of the sites researched. What colors / color schemes were favored the most? Font pairings? How was spacing used throughout the site? Was there enough between the elements, or were things packed too closely together, like sardines?"
			},
			{
				"tag": "p",
				"content": "It also became apparent during this step that one had to ask the question, “What’s the best way to do research for a project like this?” It had to fall in line with the time constraints we had — at this point we could reasonably expect to have three days maximum to write out the code for the site after the research."
			},
			{
				"tag": "p",
				"content": "My initial thought process for the research went something like this: Treat it like a spree. I chose half a dozen websites and grabbed everything I could off of them as quickly as I could."
			},
			{
				"tag": "p",
				"content": "I began by looking up rental agency websites in a familiar location - the Outer Banks of North Carolina, a popular resort area in the Mid-Atlantic region."
			},
			{
				"tag": "p",
				"content": "I took note of the colors used -- shades of green and blue took center stage on nearly every page, followed by tan and white. It fit the sites' goal of evoking a \"beach\" vibe."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/outer-banks/photo-exports/sunrealtync.jpg",
				"figcaption": "One of the sites researched - Sun Realty, Outer Banks, NC"
			},
			{
				"tag": "p",
				"content": "Beach landscape photographs were used as a backdrop for header text on every site I visited. Some websites immediately showed a date/time/number of guests component right off the bat (\"Choose your destination\"); users were able to cut down on their browsing time by being given back only the available results within their specified time period."
			},
			{
				"tag": "p",
				"content": "For all of the sites, further down, a module showed \"categories\" of rentals to choose from (\"Oceanside Rentals\", \"Last Minute Deals\", etc)."
			},
			{
				"tag": "figure",
				"class": "figure-0",
				"src": "data/case-studies/outer-banks/photo-exports/popular-searches.jpg",
				"figcaption": false
			},
			{
				"tag": "p",
				"content": "After the initial passes on the chosen websites I read a little on font pairings and dug into Google Fonts to find some typefaces that might fit my chosen theme."
			},
			{
				"tag": "p",
				"content": "All of this research prepared us for the following day — the style tile."
			},
			{
				"tag": "h3",
				"content": "Day 4"
			},
			{
				"tag": "p",
				"content": "A style tile is a visual device used in project management and implementation to convey ideas about theming, layout and typography to a stakeholder."
			},
			{
				"tag": "p",
				"content": "Our goal was to take all of the ideas found in the research and mock up a style tile as a prelude to the actual implementation of the code."
			},
			{
				"tag": "p",
				"content": "Getting all of the elements into a presentable \"layout\" format was less important at this stage to me than getting a cohesive feeling about the elements going. The colors, the fonts, the shapes — all of it needed to convey what all of us can probably collectively agree can be called “the beach vibe”. Relaxed. Free. Calming. A piña colada."
			},
			{
				"tag": "p",
				"content": "Two color palettes to be used with site elements, header fonts, and fonts used for paragraph text were included."
			},
			{
				"tag": "figure",
				"class": "figure-1",
				"src": "data/case-studies/outer-banks/photo-exports/style-tile.jpg",
				"figcaption": ""
			},
			{
				"tag": "h3",
				"content": "Days 5 and 6"
			},
			{
				"tag": "p",
				"content": "It was time to get the code rolling — to use our tools, research and visual devices to make the final layout as close as possible to the sites we had researched."
			},
			{
				"tag": "h3",
				"content": "The first pass"
			},
			{
				"tag": "figure",
				"src": "data/case-studies/outer-banks/photo-exports/background-repeat.jpg",
				"figcaption": "Figure 1.1"
			},
			{
				"tag": "figure",
				"class": "figure-2",
				"src": "data/case-studies/outer-banks/figure-2.webp",
				"figcaption": "Figure 1.2"
			},
			{
				"tag": "figure",
				"class": "figure-3",
				"src": "data/case-studies/outer-banks/figure-3.webp",
				"figcaption": "Figure 1.3"
			},
			{
				"tag": "p",
				"content": "The first phase. I’d just placed the photos and new fonts into the layout and incorporated some color choices. Immediate issues included getting the first page-wide image to not repeat — and for it to be centered. The spacing in the first section hadn’t been worked out yet, but user feedback told me there wasn’t enough space between the image and the first bit of text content. (fig. 1)."
			},
			{
				"tag": "p",
				"content": "Our site template included an <code>&lt;article&gt;</code> section. The PHP element of the project came into play here — data from an associative array was used to populate each of the <code>&lt;article-card&gt;</code> elements. I didn’t change too much about the initial card styling on the first pass, but added images and the chosen heading and “normal text” fonts (fig. 2)."
			},
			{
				"tag": "p",
				"content": "The module in fig. 3 is a module of the same type as the bottom half of fig. 1. It mostly served to test out which color was the most effective for the space."
			},
			{
				"tag": "h3",
				"content": "The second pass"
			},
			{
				"tag": "figure",
				"class": "figure-4",
				"src": "data/case-studies/outer-banks/figure-4.webp",
				"figcaption": "Figure 1.4"
			},
			{
				"tag": "p",
				"content": "From a spacing standpoint, it’s an improvement from the first pass. User feedback about the legibility (or lack thereof) of the heading font led me to try another one."
			},
			{
				"tag": "figure",
				"class": "figure-5",
				"src": "data/case-studies/outer-banks/figure-5.jpeg",
				"figcaption": "Figure 1.5"
			},
			{
				"tag": "p",
				"content": "I worked up the cards a good bit for this pass. I added box-shadow to the edges of each card and used an orange-black color scheme for the headings and text to reflect how this info appeared on one of the researched sites."
			},
			{
				"tag": "p",
				"content": "I removed the padding from the <code>&lt;img&gt;</code> elements to allow them to fill the card. <code>align-items: flex-start</code> had been applied to the <text-content> element inside the card; I removed this to allow the button to expand out across the card (fig. 5). I reorganized the code to keep the default stylings for each “type” of module in their respective stylesheets — NOT the general “site.css” file."
			},
			{
				"tag": "h3",
				"content": "Final iteration"
			},
			{
				"tag": "p",
				"content": "I had a few tasks I wanted to check off for the home stretch. First — double- and triple-check and make sure the site looks good on a small screen. (Could the spacing between the top navbar and the button below it in the first section look a little more harmonious even now?)"
			},
			{
				"tag": "figure",
				"class": "figure-6",
				"src": "data/case-studies/outer-banks/figure-6.webp"
			},
			{
				"tag": "p",
				"content": "I realized after looking at the sites I had researched that virtually all of them included a backdrop of a beachscape as the primary “attention-getter” on their landing pages. So — I made the change and put it into my layout."
			},
			{
				"tag": "figure",
				"class": "figure-7",
				"src": "data/case-studies/outer-banks/figure-7.jpeg"
			},
			{
				"tag": "p",
				"content": "I created a custom logo for this final pass and incorporated it into the header and footer. I did what I could to address all of the clear spacing issues in this round; adding the <code>vw</code> and <code>vh</code> element to some elements got me the consistency in spacing across screen sizes that I was looking for."
			},
			{
				"tag": "p",
				"content": "I found a nice technique to work with a background image's opacity without affecting the overlaying text — critical for the success of the dark version..."
			},
			{
				"tag": "p",
				"content": "In this technique, the gradient \"transitions\" between two separate translucent \"filters\". Unlike the normal opacity property, it doesn’t effect the child elements."
			},
			{
				"tag": "figure",
				"class": "figure-8",
				"src": "data/case-studies/outer-banks/figure-8.jpeg"
			},
			{
				"tag": "h3",
				"content": "Conclusion"
			},
			{
				"tag": "p",
				"content": "I learned a great deal about code organization from this project. Placing typographical elements in the correct places is of paramount importance when websites grow to have dozens of modules and hundreds, if not thousands, of components across multiple pages. Certain practices such as putting “one-off” changes in a broadly defined “site.css” file were helpful in keeping the default module stylings “clean” and ready to be used again for another purpose if needed."
			},
			{
				"tag": "p",
				"content": "Later, I received feedback about visualizing and working with a grid layout from the start, among other things, and I'm looking forward to implementing these suggestions in my next project."
			},
			{
				"tag": "p",
				"content": "For the next iteration of this project I want to think more deeply about user experience from the very outset. I will treat feedback as the most valuable form of information I can get about my work after its completion."
			},
			{
				"tag": "p",
				"content": "Key concepts for a successful user experience:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "<em>Legibility.</em> If they can’t read it, they can’t use it."
					},
					{
						"tag": "li",
						"content": "<em>Where are you leading the eye? / The emotional response comes from more than the text.</em> How is everything on the page working together to lead the user to have the kind of experience you want them to have (or lead them to the type of information they’re looking for — or deliver the kind of feedback YOU’RE looking for)?"
					}
				]
			},
			{
				"tag": "p",
				"content": "My classmates created some really impressive work for this past project. It was inspiring to see, and it’s spurred me on to dig much deeper into the entire front-end toolkit."
			},
			{
				"tag": "p",
				"content": "Improvement comes through PRACTICE. I’m looking forward to doing much, much more of it."
			}
		]
	},
	{
		"slug": "figma-to-code",
		"siteXtensionType": "php",
		"title": "figma-to-code",
		"subtitle": "Working with designers, removing the built-in friction that can result in an environment with code as a component, and reproducing the designs faithfully.",
		"htmlContent": [
			{
				"tag": "h3",
				"content": "What is Figma?"
			},
			{
				"tag": "p",
				"content": "Figma is an application used by designers and developers to create interactive webpage mockups.  It easily simulates the path a user may take through an application by providing a “prototype” option to make connections between the desired pages.  The designer/developer can then run the demo and make changes as needed to the UX based on user feedback."
			},
			{
				"tag": "h3",
				"content": "Design"
			},
			{
				"tag": "p",
				"content": "We were provided three unique templates composed with variations of UI objects, which were in turn composed with smaller visual components — a header background, a button with text, an icon, etc."
			},
			{
				"tag": "figure",
				"class": "figure-1",
				"src": "data/case-studies/figma-to-code/photo-exports/figma-templates.jpg",
				"figcaption": "The fully composed templates."
			},
			{
				"tag": "figure",
				"class": "figure-2",
				"src": "data/case-studies/figma-to-code/photo-exports/ui-kits.jpg",
				"figcaption": "Each UI kit organizes the available components in a unique way, allowing for various iterations of a website, depending on what the client gravitates toward."
			},
			{
				"tag": "p",
				"content": "Taking this angle gave a clue on how to organize the files.  All of the modules that shared the same structural components were grouped under a similar folder name under “modules”:  “call-to-action”, “center-content”, etc.   The components themselves - which could appear in any module regardless of type -  were stored in the “components” folder."
			},
			{
				"tag": "p",
				"content": "Having organized the files, modules, and components, the next step was to begin to think about how to make a totally exact rendition of the final designs.  My initial thoughts went something like this:"
			},
			{
				"tag": "p",
				"content": "<em>\"The width of the templates is 1440px — the browser width of a 13-inch laptop.  It looks like the pixel values have been provided.  I’ll input those as the pixel values in the CSS.\" (In hindsight, it’s clear now that what these values are expressing is the maximum width/height allowed.  The margins and padding should respond to the screen size;in the second round this was one of the first things I cleared up.  See figure 3 for an example of how the standard site padding looked on a small screen…)</em>"
			},
			{
				"tag": "figure",
				"class": "figure-3",
				"src": "data/case-studies/figma-to-code/figure-3.png",
				"figcaption": "Too much padding on the sides for such a small screen!"
			},
			{
				"tag": "h3",
				"content": "Architect"
			},
			{
				"tag": "p",
				"content": "All of the text in the templates could in theory be converted to JSON data, as much of it is placeholder text that's repeated across all templates, but hard-coding the text inside each module (as each module was repeatable anyway) was the solution I went for."
			},
			{
				"tag": "h4",
				"content": "All of the templates for this project are modules; combinations of these modules are used to create each of the three final webpage mockups."
			},
			{
				"tag": "p",
				"content": "Each of the modules corresponds to one of the “primary” structures, or boxes, used for content groups.  A “module” can be thought of as a collection of media – text, movies, graphics, animations – that share a common thread of meaning or functionality.  (The word “component” could also possibly be used here, but in this project I reserved that word for the smaller pieces of code and functionality that are contained within each module.) The “hero” component, for example, is the “banner” of the site – it gives the title in the largest heading and a smaller, optional component for email input or principal links – and no matter what page the hero module is used in, it would, at the very minimum, play the same role on each page."
			},
			{
				"tag": "h4",
				"content": "How are the modules unique – how can one switch out / customize components?"
			},
			{
				"tag": "p",
				"content": "The template for each module has baseline characteristics any “child” or “variation” module will have.  Design decision:  separate templates or having them all draw off the same template? In this case it makes more sense to keep the templates separate – if the design team, or two people, land on the same idea and want to save it, it’ll require less digging to put the module together if it’s already been hard-coded out."
			},
			{
				"tag": "figure",
				"class": "three-features",
				"src": "data/case-studies/figma-to-code/photo-exports/three-versions.jpg",
				"figcaption": "Three interpretations of the same module.  What options need to be available to the visitor?"
			},
			{
				"tag": "p",
				"content": "The “Feature” modules look very different from each other, but the content gives the necessary clue to their connection -- all of them contain the option for eyebrow headers, an <code class='inline-code'>&lt;h2&gt;</code> element, and six \"feature items\" denoted either with numbers or icons."
			},
			{
				"tag": "p",
				"content": "All of the components used inside the modules are available in the UI kits created by the designers.  The basic process to build out each went something like this – create a file that stores that particular “variation” of the module.  Each variation of the module will read off the same stylesheet."
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "Stacked boxes - block, flex, or grid – and read off values provided by Figma for padding, etc.  Inserted inner-column into each section - INSIDE it – to keep it from overexpanding at large screen sizes."
					},
					{
						"tag": "li",
						"content": "This was essentially the process for each module.  I brought in components that were unique to each module variation with PHP partials.  Styling for all of the elements in each module was taken care of in the collective stylesheet, and any components that would remain consistent across the site wouldn’t need any new classes put on them."
					},
					{
						"tag": "li",
						"content": "Key was to keep margin-top on each module, remembering that each additional module will add this extra space when it’s added."
					}
				]
			},
			{
				"tag": "h3",
				"content": "Implement"
			},
			{
				"tag": "p",
				"content": "This is an exercise in paying attention! The small details are essential.  Some examples: the border-radius on the feature grid-boxes; the font colors for every text element. <code class='inline-code'>display: flex</code> was used to keep pictures and list-content beside each other at large screens (and stacked vertically for small screens)."
			},
			{
				"tag": "h3",
				"content": "Challenges"
			},
			{
				"tag": "h4",
				"content": "Designing for mobile"
			},
			{
				"tag": "p",
				"content": "We didn't get any small-screen mockups at the outset! Where does the design process fit in here?  In a real-world situation, we would get a designer involved as soon as possible to give some direction and temper some possible misdirected ideas. A review of basic responsive layout tenets would probably be in order. What’s the smallest possible screen size that a user can have?  (I treat 360px as the smallest value these days.) When I revisited this project, at the smallest screen sizes, I took a block approach to each module and went with simply stacking most content boxes on top of each other.  The variation that each module showcases and the games that each of them plays with the content show up at larger screen sizes."
			},
			{
				"tag": "h4",
				"content": "The email-submit module"
			},
			{
				"tag": "p",
				"content": "The envelope icon -- used as background on the form's input element -- was a challenge to rope in. Three CSS properties allowed for the correct positioning of the icon:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "<code class='inline-code'>background</code>"
					},
					{
						"tag": "li",
						"content": "<code class='inline-code'>background-position</code> to move the icon away from the edge of the <code class='inline-code'>&lt;input&gt;</code>. (This value is \"passively affected\" by the <code class='inline-code'>padding</code> value of the text.)"
					},
					{
						"tag": "li",
						"content": "The <code class='inline-code'>padding</code> value itself, to move the text past the envelope."
					}
				]
			},
			{
				"tag": "h4",
				"content": "The stubborn SVG"
			},
			{
				"tag": "p",
				"content": "A persistent issue throughout this project was replicating this background:"
			},
			{
				"tag": "figure",
				"class": "figure-4",
				"src": "data/case-studies/figma-to-code/figure-4.png"
			},
			{
				"tag": "p",
				"content": "My initial thought was to set the background-position to center and the background-size to cover.  In this situation, if the SVG begins to break out of its container (to preserve its aspect ratio), it will begin to clip.  It’s necessary to set the background-position to bottom here so any clipping will take place at the top of the image, where the effect is negligible."
			},
			{
				"tag": "h4",
				"content": "Some final pieces"
			},
			{
				"tag": "p",
				"content": "For the final editing pass, finessing the size of all objects was the focus.  This played the biggest part in the working-out of the details on the small-screen sizes.  Long-term lessons for the future are to bake in default <code class='inline-code'>margin-top</code> values for all modules (they being the main “classes” of components that make up the web page."
			},
			{
				"tag": "p",
				"content": "Overall, what was the biggest progress-blocker during the final revisions?  The way the components were used within the modules for the first pass of the project.  The most glaring example was an <code class='inline-code'>&lt;input&gt;</code> component that was used for completely different form variations (part of the “email-submit” module referenced above) – it should have been unique to each element.  Unlooked-for changes in size showed up while editing because of this."
			},
			{
				"tag": "p",
				"content": "The project easily proved its value and is continuing to do so – it’s evolving into a larger HTML boilerplate project that I plan to treat as a “blank canvas” for future client projects.  The project stressed the following concepts strongly:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "communicating ideas in a way that is understandable by everyone on a team;"
					},
					{
						"tag": "li",
						"content": "reusing module components whenever and wherever possible (this will create a sense of unity of intention across all designs);"
					},
					{
						"tag": "li",
						"content": "understanding how to delegate tasks, both for one’s own work and for each team member’s work;"
					},
					{
						"tag": "li",
						"content": "the perhaps counterintuitive realization that designing the webpage – visually and how it will work – should- take longer than actually writing the code out.  Nothing will slow a developer down more than trying to think through a complex design problem while actually writing out the code.  Better to go through a few iterations on a whiteboard first – then tackle it in the code editor."
					}
				]
			}
		]
	},
	{
		"slug": "ninja-strings",
		"siteXtensionType": "php",
		"url": "https://ninjastrings.net",
		"title": "ninja strings",
		"subtitle": "Building a custom WordPress theme from scratch and setting it up on the Internet.",
		"htmlContent": [
			{
				"tag": "p",
				"content": "The client for this project is a booking agent based in Richmond, Virginia.  The original site was built with GoDaddy’s Website Builder, but as the client’s business grew, to remain competitive, he knew that a significant upgrade to the site’s design was needed.  This was confirmed when he got on a support call with a GoDaddy representative, and they said as much. “This is definitely the old version of our website builder!”"
			},
			{
				"tag": "p",
				"content": "The site had an attractive basic layout, but its structure didn’t take responsivity or user accessibility into account — there was no “mobile” version of the site.  Because of its templated nature, it wasn’t going to be possible for the client to add custom media elements or create custom modules — it all had to fit into the provided layouts — and in order to get more options — the client would have to pay more."
			},
			{
				"tag": "h3",
				"content": "Design"
			},
			{
				"tag": "h4",
				"content": "Research"
			},
			{
				"tag": "p",
				"content": "I enlisted the aid of my top UX feedback expert (aka my better half) to help with the research."
			},
			{
				"tag": "p",
				"content": "The first step in any design process is to think about the end product — but from a “feeling” or “overall impression” angle.  What do you want the client, customer, or visitor to feel about your product or service?"
			},
			{
				"tag": "p",
				"content": "The business is a booking agency for string instrumentalists.  The jobs these players are typically hired for are high-end private events — weddings, church services, fundraising galas, museum exhibit openings, etc.  In the past, classical and jazz music were the favored styles/genres at these types of jobs, but as tastes have evolved and become more progressive and inclusive, clients are just as likely to ask for Taylor Swift or A$AP Ferg at their wedding as they are to ask for Pachelbel’s Canon."
			},
			{
				"tag": "figure",
				"class": "ns-logo",
				"src": "data/case-studies/ninja-strings/ns-logo.jpg"
			},
			{
				"tag": "figure",
				"class": "tricolor",
				"src": "data/case-studies/ninja-strings/tricolor.jpg"
			},
			{
				"tag": "figure",
				"src": "data/case-studies/ninja-strings/initial-moodboard.png"
			},
			{
				"tag": "p",
				"content": "I started with these initial ideas.  The client had this logo designed years ago by a Sri Lankan artist named Dushan; he definitely wanted to keep it for the site upgrade. The photos, typography, and colors and textures were gathered from websites whose businesses were similar to the client's -- music performance for private events."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/ninja-strings/style-tile-light.png"
			},
			{
				"tag": "figure",
				"src": "data/case-studies/ninja-strings/style-tile-dark.png"
			},
			{
				"tag": "p",
				"content": "I constructed some style tiles to get some basic ideas down for colors and textures I wanted to include on the site. The decisions were driven by what words and ideas the choices evoked -- and if they were in line with the kind of vibe that the client wanted for their company!"
			},
			{
				"tag": "p",
				"content": "Some of the key words some users brought back for feedback: <em>Luxury. Playful.  Edgy. Adventurous. Bold/daring.</em> It looks like I may be onto something."
			},
			{
				"tag": "p",
				"content": "Here are some of the final layouts made in Affinity Designer."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/ninja-strings/home-small-screen.jpg"
			},
			{
				"tag": "figure",
				"src": "data/case-studies/ninja-strings/home-large-screen.jpg"
			},
			{
				"tag": "figure",
				"src": "data/case-studies/ninja-strings/contact-small-screen.jpg"
			},
			{
				"tag": "figure",
				"src": "data/case-studies/ninja-strings/contact-large-screen.jpg"
			},
			{
				"tag": "h4",
				"src": "Building out the custom WordPress theme from scratch"
			},
			{
				"tag": "p",
				"content": "I kept more or less the same page structure from the client’s previous site: a home page, a basic content page describing what the business does, links to audio and video clips of the musicians, a list of the group’s current repertoire, and a contact form. "
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "<code class='inline-code'>header.php</code> and <code class='inline-code'>footer.php</code> files.  The <code class='inline-code'>wp_head()</code> function can be used to grab local stylesheets."
					},
					{
						"content": "some functions to customize how CSS is loaded into the project"
					}
				]
			},
			{
				"tag": "p",
				"content": "Recent use of Codekit in projects has allowed for CSS files to be compiled into one large style.css.  I’ll use a framework I’ve been using for the past several projects, with compartmentalized CSS files for reset attributes, variables, typography, and reusable modules — and all of these will end up getting compiled into a single file after Codekit’s done with it."
			},
			{
				"tag": "h3",
				"content": "Architect"
			},
			{
				"tag": "p",
				"content": "Basic scaffolding was addressed first.  I created a Git repository for the project and hooked in the CSS framework (composed of SCSS files, and a single style.css sheet for those files to compile to)."
			},
			{
				"tag": "p",
				"content": "I had some ideas about which CSS properties I would need to implement the designs.  With grid layouts, the developer can specify the exact width and height of one or any combination of grid cells — and responsive units (percentages, viewport width / height) can also be used."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/ninja-strings/codeblocks/homepage-grid.php"
			},
			{
				"tag": "p",
				"content": "Keeping the spacing and content proportional throughout all screen sizes is part of the definition of responsive design.  Words like “flowing” and “balanced” will naturally begin to appear to describe such a setup.  The <code class='inline-code'>flex-basis</code> property offers one simple way to help preserve these planned-out ratios.  The value that's on a <code class='inline-code'>flex-basis</code> (shorthand - <code class='inline-code'>flex</code>) property on a child container within a flexbox will dictate how much space that container's allowed to take up.  If two children both have <code class='inline-code'>flex: 1</code>, they’ll each take up half the available space.  If three children have <code class='inline-code'>flex: 1</code>, each child will take up one third of the available space."
			},
			{
				"tag": "h4",
				"content": "Registering menus in the WordPress CMS"
			},
			{
				"tag": "p",
				"content": "If the developer would like to offload menu handling onto the WP framework, WordPress offers built-in menu functions and an interface within the CMS."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/ninja-strings/codeblocks/register-menu.php"
			},
			{
				"tag": "p",
				"content": "I had the initial idea of placing a custom icon next to the current active page link.  This is not an easy task within the WP menu setup due to how the framework automatically renders HTML tags (placing an SVG inside, or next to, list items, requires an extra div wrapper — and the custom function that builds menus is based on an array of items only — and lists and list items are automatically generated from this array without the possibility of including extra HTML elements)."
			},
			{
				"tag": "p",
				"content": "It may be a better solution for the developer to hard-code in the menu if they have specific ideas about integrating icons into menu list items."
			},
			{
				"tag": "h3",
				"content": "Implement"
			},
			{
				"tag": "p",
				"content": "Hosting the live site will require a server, just as a local server is required to run PHP scripts.  The short stack consists of:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "An Amazon Lightsail instance for the server itself.  Amazon Web Services offers a similar service, Elastic Compute Cloud (EC2) for larger, more data-intensive applications, but for a lean site with a small amount of initial traffic, Lightsail is a good starting point."
					},
					{
						"content": "SpinupWP for the server’s front-facing control panel. On the backend side, the app also provides an SSL certificate and a database."
					}
				]
			},
			{
				"tag": "p",
				"content": "I explored switching the domain / DNS info over from GoDaddy’s systems to a custom setup, but due to the time constraints and negligible cost of keeping them hosted there, I decided to leave them for now."
			},
			{
				"tag": "p",
				"content": "I installed the WPMigrate plugin locally in order to be able to push local code changes up to the live site.  This plugin allows for the creation of custom push rules and the ability to save these rules into a group that can be run repeatedly."
			},
			{
				"tag": "p",
				"content": "I went through the same logic with the email server;  GoDaddy offers this service at a negligible cost, so it will stay in place for now."
			},
			{
				"tag": "h3",
				"content": "Conclusion"
			},
			{
				"tag": "p",
				"content": "This project offered several wonderful challenges and gave me a look at the complete tech stack needed for any website.  All aspects of the design process were included - content strategy, research, layout design, UX/UI feedback, code writing, working within content management systems (WordPress), breaking out of the CMS when needed to write custom code (i.e. custom functions), and responsive design, implemented through well-written and well-organized CSS."
			}
		]
	},
	{
		"slug": "highways-of-virginia",
		"siteXtensionType": "php",
		"title": "highways of virginia",
		"subtitle": "Building a fully-functional CRUD app in vanilla PHP.",
		"htmlContent": [
			{
				"tag": "h3",
				"content": "The first run"
			},
			{
				"tag": "p",
				"content": "The first iteration of this project was a sort of “trial run” to see how much knowledge of PHP I had absorbed through research and practice.  What I knew about layout design at this juncture was also incorporated into this setup."
			},
			{
				"tag": "figure",
				"class": "original",
				"src": "data/case-studies/highways-of-virginia/original-1.png"
			},
			{
				"tag": "p",
				"content": "Flexbox and grid were still fairly new to me at this point, but they were, and are, the solutions for some challenges that come with designing for different screen sizes."
			},
			{
				"tag": "figure",
				"class": "original",
				"src": "data/case-studies/highways-of-virginia/original-2.png"
			},
			{
				"tag": "p",
				"content": "Grid is the solution for moving between small and large screens for the route-list – but these photos are way too large at the small scale."
			},
			{
				"tag": "figure",
				"class": "original-1",
				"src": "data/case-studies/highways-of-virginia/original-3.png"
			},
			{
				"tag": "p",
				"content": "It's clear that this project was not left in a finished state!"
			},
			{
				"tag": "figure",
				"class": "original-2",
				"src": "data/case-studies/highways-of-virginia/original-4.png"
			},
			{
				"tag": "p",
				"content": "And for icing on the cake – a form that wasn’t totally functional."
			},
			{
				"tag": "figure",
				"class": "original-3",
				"src": "data/case-studies/highways-of-virginia/original-5.png"
			},
			{
				"tag": "p",
				"content": "The time limit had been reached.  I left this project for the moment, but my appetite for PHP had been whetted.  I returned to this project a couple of months later, set on having a totally functional CRUD app."
			},
			{
				"tag": "h3",
				"content": "The second run"
			},
			{
				"tag": "h4",
				"content": "Making a Figma mockup"
			},
			{
				"tag": "p",
				"content": "Figma is a collaborative application for interface design.  It’s useful for mockups in that you can simulate the user experience by using the “Prototype” feature — once you’ve created all the screens you want, you can connect screen mockups with dynamic components and simulate the user journey through the site."
			},
			{
				"tag": "figure",
				"class": "figma",
				"src": "data/case-studies/highways-of-virginia/figma-1.png"
			},
			{
				"tag": "figure",
				"class": "figma",
				"src": "data/case-studies/highways-of-virginia/figma-2.png"
			},
			{
				"tag": "figure",
				"class": "figma",
				"src": "data/case-studies/highways-of-virginia/figma-3.png"
			},
			{
				"tag": "p",
				"content": "The site contains the following pages:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "Home page - the site's landing page."
					},
					{
						"content": "Route List - a list of all of the routes currently in the site's database"
					},
					{
						"content": "Create route - a page with a form template containing all of the attributes needed to add a new entry to the database"
					},
					{
						"content": "Update route - a page with a form template whose fields are already filled out with the current data in the database.  The user can update these values."
					},
					{
						"content": "Delete route - a page that delivers a simple confirmation statement that the requested data was removed from the database."
					}
				]
			},
			{
				"tag": "h3",
				"content": "Writing the code"
			},
			{
				"tag": "p",
				"content": "In the first run of the project, all site data was stored in a JSON object.  The same paradigm was used here."
			},
			{
				"tag": "p",
				"content": "A functions.php file was made to cut down on the amount of repeated code and to place all “actions” into repeatable “component” functions."
			},
			{
				"tag": "p",
				"content": "The “create route” and “update route” pages use the same form template, with conditional PHP statements in each respective page to determine how the form will behave. "
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/highways-of-virginia/codeblocks/form-initial-values.php"
			},
			{
				"tag": "h3",
				"content": "Updating the form data"
			},
			{
				"tag": "p",
				"content": "This was by far the biggest challenge of the project.  It consisted of two phases:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "isolating the specific data that needed to be changed"
					},
					{
						"content": "showing the updated data on the route’s form once submitted."
					}
				]
			},
			{
				"tag": "p",
				"content": "The code had to be written carefully; each variable needed to be defined at a certain point, as PHP scripts out line-by-line, in order."
			},
			{
				"tag": "p",
				"content": "The logic goes like this:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "The variable <code class='inline-code'>$currentHighwayId</code> is equal to the current page slug (which is the same as the item identifier in the database).  This will be used later as the index of the item that’s going to be overwritten in the database"
					},
					{
						"content": "The variable <code class='inline-code'>$highway</code> populates the page form with the current highway data."
					}
				]
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/highways-of-virginia/codeblocks/update-1.php"
			},
			{
				"tag": "p",
				"content": "Once the user updates the data, <code class='inline-code'>$highway</code>’s values will be updated to the new data.  It still remains, though, to actually push this data up to the database and overwrite the old data."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/highways-of-virginia/codeblocks/update-2.php"
			},
			{
				"tag": "p",
				"content": "The above codeblock is the key!"
			},
			{
				"tag": "p",
				"content": "If the update form is submitted, the variable <code class='inline-code'>$highway</code> gets new values.  It hasn’t been pushed up to the database yet, though!"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "The <code class='inline-code'>getHighways()</code> function decodes the JSON database object and prepares it for editing."
					},
					{
						"content": "The second line of code locates the object in the database whose index matches the current slug of the page and makes the values in that object equal to the newly submitted user values in <code class='inline-code'>$highway</code>."
					},
					{
						"content": "The remaining code \"wraps up\" the new data into the database, encoding it back into JSON format and putting it back into the database file.  A confirmation will appear on the page after the update."
					}
				]
			},
			{
				"tag": "h3",
				"content": "User feedback on the second pass"
			},
			{
				"tag": "p",
				"content": "The project up to this point heavily favored the programming aspect over the design aspect; the layout at this stage was really just a validation that everything was \"working as it should\"."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/highways-of-virginia/second-pass-1.png"
			},
			{
				"tag": "p",
				"content": "The \"text-align-center\" approach on the home page isn't as convincing here as I imagined."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/highways-of-virginia/second-pass-2.png"
			},
			{
				"tag": "p",
				"content": "There aren't enough common alignment points on this page -- everything looks disjointed and it doesn't feel \"solid\"."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/highways-of-virginia/second-pass-3.png"
			},
			{
				"tag": "p",
				"content": "Once again, the centering idea isn't playing out to my benefit.  The position of the code output doesn't really clarify what it is or where it originated!"
			},
			{
				"tag": "p",
				"content": "With the functionality in place, time for the UX/UI developer to come out and play."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/highways-of-virginia/mockups-1.png",
				"figcaption": "Some extremely rough initial mockups brought to you by Affinity Designer."
			},
			{
				"tag": "h4",
				"content": "Final changes: typography"
			},
			{
				"tag": "p",
				"content": "The typography was originally based on a “golden ratio” framework, where each “step” of font-size was 1.618 times greater than the previous step.  On paper, this appealed to my aesthetics, but it didn’t work out in practice — the type became too large too quickly, and this had a negative effect on readability."
			},
			{
				"tag": "p",
				"content": "The new setup:  normal copy is 16px, and the ratios between headers have been noticeably tightened."
			},
			{
				"tag": "figure",
				"class": "text-ratios",
				"src": "data/case-studies/highways-of-virginia/text-ratios.png"
			},
			{
				"tag": "p",
				"content": "I revamped the header's layout -- I aligned the icon and site title to the left and the menu icon to the right with <code class='inline-code'>justify-content: flex-end</code>."
			},
			{
				"tag": "figure",
				"class": "",
				"src": "data/case-studies/highways-of-virginia/new-header.png"
			},
			{
				"tag": "p",
				"content": "I removed extraneous element wrappers whose original purpose was to align elements more easily — but they ended up interfering with the communication between parent and child elements -- and objects could be more easily aligned in relation to the parent without one of these \"middlemen\"."
			},
			{
				"tag": "p",
				"content": "One piece of the UX feedback centered on contrast and readability on the create / update form.  I updated the background color and type color on the forms to address this."
			},
			{
				"tag": "figure",
				"class": "form-before",
				"src": "data/case-studies/highways-of-virginia/form-before.jpg",
				"figcaption": "Original color and spacing scheme"
			},
			{
				"tag": "figure",
				"class": "form-after",
				"src": "data/case-studies/highways-of-virginia/form-after.jpg",
				"figcaption": "Updated color and spacing scheme. The new ratios are more than enough for the eye to distinguish between header sizes in practice."
			},
			{
				"tag": "h4",
				"content": "Showing the chosen route filter on the route list page"
			},
			{
				"tag": "p",
				"content": "Another user presented a nice UX challenge:  on the route-list page, when the user filters routes by type, the “route-type” menu reverts to the “all-routes” selection when the filtered results are shown.  This presents inconsistent information.  The menu should show the current filter at all times."
			},
			{
				"tag": "p",
				"content": "What’s the best way to reason through this problem?  With pseudocode!"
			},
			{
				"tag": "p",
				"content": "\"In order for the <code class='inline-code'>&lt;select&gt;</code> element to show the correct filter after the <code class='inline-code'>$_POST</code> request is made, the selected <code class='inline-code'>&lt;option&gt;</code> needs to display the attribute <code class='inline-code'>selected</code> inside that tag.\""
			},
			{
				"tag": "p",
				"content": "I wrote a PHP function to return a ‘selected’ string if the $_POST value of the route filter is equal to the value of the option the user chooses."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/highways-of-virginia/codeblocks/isSelected-1.php"
			},
			{
				"tag": "p",
				"content": "Here’s the HTML that contains the PHP function in action."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/highways-of-virginia/codeblocks/isSelected-2.php"
			},
			{
				"tag": "h3",
				"content": "Conclusion"
			},
			{
				"tag": "p",
				"content": "This project started out as a simple exploration of CRUD concepts, evolved into a fully-functional CRUD site, and ended with some serious considerations on the nature of visual design and user experience as they pertain to websites and how best to integrate these considerations into the site."
			}
		]
	},
	{
		"slug": "funko-pop-east-coast",
		"siteXtensionType": "php",
		"url": "https://tall-dragon.surge.sh",
		"title": "funko pop east coast",
		"subtitle": "An exploration of Vue, NoSQL databases, and the elements that make up an e-commerce site.",
		"htmlContent": [
			{
				"tag": "h3",
				"content": "Introduction"
			},
			{
				"tag": "p",
				"content": "This project brings together many of the most important concepts found in web design and development:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "content, design, and layout strategy"
					},
					{
						"content": "e-commerce site design"
					},
					{
						"content": "application design with Vue"
					},
					{
						"content": "cloud databases, specifically the Firebase NoSQL database"
					}
				]
			},
			{
				"tag": "p",
				"content": "The large-scale goals for this project were to"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "gain proficiency with Vue version 3"
					},
					{
						"content": "gain proficiency with Firebase"
					},
					{
						"content": "implement an accessible and responsive layout based on multiple passes of user feedback"
					},
					{
						"content": "successfully implement the major components present in modern e-commerce sites"
					}
				]
			},
			{
				"tag": "p",
				"content": "What are the main elements of a successful e-commerce site?"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "Ease of navigation. Each element on the page has a clear role to play."
					},
					{
						"content": "Users need to be able to filter items by type, add items to a “favorites” collection, add items to a shopping cart, and purchase those items."
					}
				]
			},
			{
				"tag": "h3",
				"content": "Preparatory work"
			},
			{
				"tag": "p",
				"content": "To get a better handle on Vue I went through several exercises in Brian Hogan's book \"Exercises for Programmers\" using Vue version 3.  Check them out in the Codepens below."
			},
			{
				"tag": "codepen",
				"penID": "NWBprew",
				"codeType": "js"
			},
			{
				"tag": "codepen",
				"penID": "bGjqzyd",
				"codeType": "js"
			},
			{
				"tag": "h3",
				"content": "Project components"
			},
			{
				"tag": "p",
				"content": "Vue, Firebase, and Pinia are the main components of this project."
			},
			{
				"tag": "p",
				"content": "<em>Vue</em> is a JavaScript framework used to build static and dynamic websites and applications. The general structure is based on \"views\", individual components that can be pages, sections of pages, or modules that have a specific function or purpose.  Each \"view\" has a scripting area that stores JavaScript code, a templating area that stores HTML, and a styling area that stores CSS. The CSS can be scoped for each view, or store styling directives that cascade down to other views in the project."
			},
			{
				"tag": "p",
				"content": "<em>Firebase</em> is a cloud NoSQL databse. Instead of organizing data into tables composed of rows and columns, data is organized into flexible, format-agnostic \"documents\" and \"collections\"."
			},
			{
				"tag": "p",
				"content": "In classical database design, normalization and non-repetition of data are key concepts. Because of this emphasis on non-repetition, as the size of the database increases, the speed at which some elements can be read and accessed is slowed down. As the sheer amount of accessible information has increased, other paradigms of data access and storage are emerging.  The NoSQL database model, while possibly introducing more data repetition into the setup, addresses the need for faster read speeds (this ties into user accessibility, which is becoming a common theme across all vantage points in software development)."
			},
			{
				"tag": "p",
				"content": "<em>Pinia</em> is a store library and state management framework for Vue.  It allows for the creation of “services” that can contain multiple functional elements that can be called anywhere in the application."
			},
			{
				"tag": "h3",
				"content": "Design"
			},
			{
				"tag": "p",
				"content": "The lifecycle of a Vue app begins in the <code class='inline-code'>index.html</code> file.  The <code class='inline-code'>&lt;script&gt;</code> tag in this file brings in the <code class='inline-code'>main.js</code> file, which contains the internal code needed to initialize and mount the app.  The main application file, <code class='inline-code'>App.vue</code>, is the “single-page” element that the entire application runs in; this “single-page” setup allows for individual components to be reloaded on a page without having to reload the entire page. This is known as <em>hot-module reloading</em>."
			},
			{
				"tag": "p",
				"content": "Computed properties are one of the primary paradigms used in Vue. They allow for multiple pieces of functionality to be stored in a single variable (whose value could change depending on other values, i.e. which user is currently logged in) that can be called in the HTML to return a custom value."
			},
			{
				"tag": "p",
				"content": "Computed properties can also simply help with code readability by storing long queried values (such as those that come up in chaining) into one callable variable:"
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/user-id.php"
			},
			{
				"tag": "h4",
				"content": "Setting up the project"
			},
			{
				"tag": "ul",
				"content": [
					{
						"content": "Installed Vue"
					},
					{
						"content": "LSP Volar for language support, type-checking"
					},
					{
						"content": "JSPrettier for auto-code formatting"
					},
					{
						"content": "ESLint for code optimization"
					}
				]
			},
			{
				"tag": "h4",
				"content": "Foundational elements"
			},
			{
				"tag": "p",
				"content": "All of the high-level pages and subpages are referred to as “views” in this framework. (Smaller components also take the form of Vue files, and they’re imported as needed across the application.)"
			},
			{
				"tag": "p",
				"content": "I designed the homepage to have a “Featured Figures” list.  This could be customized according to what the vendor wants to showcase on the site, but for the moment, a function will generate three random figure cards from the collection and place them on the home page."
			},
			{
				"tag": "p",
				"content": "I used the shuffle method in the NPM package <span class='inline-code'>lodash</span> to generate the random figures."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/lodash.php"
			},
			{
				"tag": "p",
				"content": "In the database, each “figure” document has key-value pairs that describe what category and subcategory of product the figure belongs to.  These values are used in the application to filter items, so only the items that have those specific values will be shown on the “Category” and “Subcategory” pages."
			},
			{
				"tag": "p",
				"content": "The site header, the individual figure cards, the checkout form, and the rest of the smaller components on the site are imported into the pages and subpages as needed."
			},
			{
				"tag": "h4",
				"content": "Second-layer elements"
			},
			{
				"tag": "p",
				"content": "The content of the site is now in place.  The rest of the functionality of the site will depend on the choices the user makes.  Making a user login system will open the door for more custom components."
			},
			{
				"tag": "p",
				"content": "I used Pinia to bundle everything needed to isolate users and their data into one “storage object”.  This object is called later, most notably on the home page, to show current user login info and other custom elements, such as user favorites, that are contained within that specific user’s data."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/user-info.php"
			},
			{
				"tag": "p",
				"content": "Administrators (users with a role of “admin”) have access to a dashbaord that allows for creating, updating, and removal of figures, categories, and subcategories:"
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/admin-dashboard.php"
			},
			{
				"tag": "p",
				"content": "<code class='inline-code'>@click</code> is shorthand for the <code>v-on</code> directive, which handles events in the same way as the familiar JavaScript method <code class='inline-code'>addEventListener</code>."
			},
			{
				"tag": "h4",
				"content": "Additional user capabilities"
			},
			{
				"tag": "p",
				"content": "Each user needs a unique shopping cart.  To store each user’s unique selections for their favorites and cart, I connected Pinia first to the browser’s local storage and then to a Firebase instance in the cloud."
			},
			{
				"tag": "p",
				"content": "Getting the cart to be specific to each users requires putting the data in the proper place in the hierarchy.  Each user document in Firebase will have its own “cart” collection that can then be accessed depending on which user is logged in."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/cart-service.php"
			},
			{
				"tag": "p",
				"content": "When storing multiples of one item, the user doesn’t want to be stuck with one line for every single item in the cart.  The items need to be grouped by type.  I made a computed property using the <code class='inline-code'>reduce</code> method to take care of this…."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/grouping-reduce.php"
			},
			{
				"tag": "h4",
				"content": "Exploratory elements - Favorites"
			},
			{
				"tag": "p",
				"content": "Users often want to bookmark an item before committing to a purchase.  When a user clicks the “favorites” icon, the CSS class of the icon changes.  Additionally, based on the boolean value of the <code class='inline-code'>isFavorited</code> variable, that item either will or will not be filtered and show up in the user’s “favorites” collection in the database."
			},
			{
				"tag": "p",
				"content": "The <code class='inline-code'>favoritedFigures</code> computed property returns only the items that the user has “favorited”, places them in an array, and makes them available for the HTML template."
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/favorited-figures-1.php"
			},
			{
				"tag": "codeblock",
				"filepath": "data/case-studies/funko-pop-east-coast/codeblocks/favorited-figures-2.php"
			},
			{
				"tag": "h3",
				"content": "Conclusion"
			},
			{
				"tag": "p",
				"content": "I got a ton of exposure to many new programming concepts as seen through the Vue lens with this project, but the overarching theme of it ended up being, as it ends up being with any good application, “good design.”  When we talk about design, we’re talking about more than clean visuals and well-written code.  Design is about accessibility and user experience. The elements of a website or application exist, and are necessary, so that the things we build are attractive and useful.  If something exists in an application, and it isn’t clear to the user or the developer why it’s there and what it’s doing, should it really be there in the first place? It will be clear when something is well-designed because there won't be any friction in the user's mind, either with visuals or the question of where to look or what to do next."
			},
			{
				"tag": "p",
				"content": "The journey of software development is one of continuous improvement and empathy.  This project greatly increased my technical skills and confidence with JavaScript and brought home the notion that all of the tools we use don’t exist in isolation, so it was ultimately a journey to a “higher level of resolution” in my work and thought processes."
			}
		]
	},
	{
		"slug": "frontend-challenge",
		"siteXtensionType": "html",
		"title": "front end engineer challenge",
		"subtitle": "Using native HTML, CSS and JavaScript to craft a simple frontend prototype for an e-commerce site.",
		"htmlContent": [
			{
				"tag": "details",
				"content": [
					{
						"tag": "summary",
						"content": [
							{
								"tag": "h2",
								"class": "summary-title",
								"content": "Secondary header. Design"
							}
						]
					},
					{
						"tag": "p",
						"content": "Chandler doubloon jury mast killick to go on account hang the jib Admiral of the Black swing the lead take a caulk fire ship. Rigging overhaul doubloon ye topmast capstan chase Sail ho wherry cog. Coffer quarter hogshead Yellow Jack clap of thunder barkadeer pressgang brigantine Pirate Round scurvy."
					}
				]
			},
			{
				"tag": "details",
				"content": [
					{
						"tag": "summary",
						"content": [
							{
								"tag": "h2",
								"class": "summary-title",
								"content": "Secondary header. Architect"
							}
						]
					},
					{
						"tag": "p",
						"content": "Pirate scallywag Cat o'nine tails prow execution dock spanker gibbet tack Nelsons folly fore. Transom rutters run a shot across the bow rigging run a rig Barbary Coast red ensign doubloon scuppers tackle. Ho Shiver me timbers boatswain cutlass Blimey hail-shot Nelsons folly smartly Corsair chantey."
					}
				]
			},
			{
				"tag": "details",
				"content": [
					{
						"tag": "summary",
						"content": [
							{
								"tag": "h2",
								"class": "summary-title",
								"content": "Secondary header. Implement"
							}
						]
					},
					{
						"tag": "p",
						"content": "Run a shot across the bow bounty Sail ho yard hempen halter long clothes fluke handsomely nipperkin hornswaggle. Yawl Pirate Round landlubber or just lubber loaded to the gunwalls red ensign fluke run a rig Brethren of the Coast weigh anchor poop deck. Letter of Marque booty me run a shot across the bow hearties wench snow trysail overhaul line."
					}
				]
			},
			{
				"tag": "p",
				"content": "At the outset of this project I needed to be clear on the written requirements -- and be able to read between the lines and discern the hidden ones."
			},
			{
				"tag": "h4",
				"content": "What are the written goals?"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "Create a dropdown menu that displays products."
					},
					{
						"tag": "li",
						"content": "Each product has a favorites toggle that adds and removes items from local storage, making choices persistent."
					},
					{
						"tag": "li",
						"content": "Semantic (custom HTML tags), accessible (easy for screen readers to parse), responsive (displays well across all screen sizes), and discoverable (includes metadata)."
					},
					{
						"tag": "li",
						"content": "Using native capabilities as much as possible for each language"
					}
				]
			},
			{
				"tag": "h4",
				"content": "What are the unwritten goals?"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "Proper scoping of JavaScript."
					},
					{
						"tag": "li",
						"content": "Using a visual design language that’s clear and to the point."
					}
				]
			},
			{
				"tag": "h3",
				"content": "Designing the layout"
			},
			{
				"tag": "p",
				"content": "The layout needed to follow a tried-and-tested format.  While ingenuity is without question to be valued in matters of creativity or learning, it’s not necessary or required for this project -- at least in terms of the visual design.  The components of the site need to be immediately familiar so the logic of what to do next is perfectly clear."
			},
			{
				"tag": "p",
				"content": "What layout would work best?  How would I structure the HTML elements?  I started with unordered lists and list items -- categories and products, naturally, would seem to fall into that pattern.  After some digging and a conversation, I found the native HTML elements that create a built-in hierarchy: <code class='inline-code'>&lt;details&gt;</code> and <code class='inline-code'>&lt;summary&gt;</code>."
			},
			{
				"tag": "p",
				"content": "The <code class='inline-code'>&lt;details&gt;</code> element contains a <code class='inline-code'>&lt;summary&gt;</code> element (which usually contains a heading or title explaining the content contained inside the dropdown) and any elements that contain the actual content of the dropdown. In the photo below, the <code class='inline-code'>&lt;div class='products'&gt;</code> contains the product list and all of the individual products for this particular category in <code class='inline-code'>ul</code> - <code class='inline-code'>li</code> format."
			},
			{
				"tag": "figure",
				"src": "data/case-studies/frontend-challenge/details-summary.png"
			},
			{
				"tag": "p",
				"content": "Each product list is displayed with all product cards in a grid.  Each card has a photo of the product, its name, a normal price (crossed out), a sale price(in bold), and a favorites icon, which can be toggled on and off and has a class that is tied to that event."
			},
			{
				"tag": "h3",
				"content": "Architecting the code"
			},
			{
				"tag": "p",
				"content": "The app runs off the following files:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "an <code class='inline-code'>index.html</code> file.  The CSS for the project is all contained in a single <code class='inline-code'>&lt;style&gt;</code> tag in this file."
					},
					{
						"tag": "li",
						"content": "a <code class='inline-code'>functions.js</code> file"
					}
				]
			},
			{
				"tag": "p",
				"content": "As many functions as possible are used to achieve various tasks within the app. The main points of interest are"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "Using JavaScript to render out the appropriate HTML"
					},
					{
						"tag": "li",
						"content": "Having a function in charge of adding all event listeners to the rendered page"
					},
					{
						"tag": "li",
						"content": "Using responsive layout techniques with CSS. <code class='inline-code'>display: grid</code> was used for nearly all flexible items.  Flexbox was used for one item in the header that needed a wrap property."
					},
					{
						"tag": "li",
						"content": "Having the visual traits of the dropdown arrow change as the <code class='inline-code'>&lt;detail&gt;</code>’s tag changes from open to closed (done with CSS)"
					},
					{
						"tag": "li",
						"content": "Using functions to change the HTML output (using the <code class='inline-code'>.outerHTML</code> method) depending on if a method has a certain <code class='inline-code'>id</code> attached"
					}
				]
			},
			{
				"tag": "h4",
				"content": "A responsive web page"
			},
			{
				"tag": "p",
				"content": "<code class='inline-code'>display: grid</code> is used for most of the major components of the site:"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "the <code class='inline-code'>&lt;summary&gt;</code> section"
					},
					{
						"tag": "li",
						"content": "the <code class='inline-code'>&lt;product-list&gt;</code> unordered list"
					},
					{
						"tag": "li",
						"content": "the product cards themselves.  The grid for these is set to <code class='inline-code'>auto 1fr 1fr</code>, a cell each for the product photo, the list price, and the sale price.  The <code class='inline-code'>auto</code> cell allows for the photo to grow and shrink as need without creating any extra padding / unused space.  The <code class='inline-code'>1 fr</code> setting"
					}
				]
			},
			{
				"tag": "h4",
				"content": "Accessibility"
			},
			{
				"tag": "p",
				"content": "Google's Lighthouse test revealed that <code class='inline-code'>&lt;button&gt;</code> elements need a name attribute to be picked up by screen readers."
			},
			{
				"tag": "h3",
				"content": "Challenges"
			},
			{
				"tag": "h4",
				"content": "Performance"
			},
			{
				"tag": "p",
				"content": "The two biggest contributors to the pass/fail condition of the Lighthouse tests in this case are"
			},
			{
				"tag": "ul",
				"content": [
					{
						"tag": "li",
						"content": "if the <code class='inline-code'>&lt;button&gt;</code> tag has a name that's accessible to screen readers"
					},
					{
						"tag": "li",
						"content": "if there's an explicit width / height set for <img> elements - and if the rendered image size is less than or equal to the intrinsic size"
					},
					{
						"tag": "li",
						"content": "the <product-cards> themselves.  The grid for these is set to <code>auto 1fr 1fr</code>, a cell each for the product photo, the list price, and the sale price.  The <code class='inline-code'>auto</code> cell allows for the photo to grow and shrink as need without creating any extra padding / unused space.  The <code class='inline-code'>1 fr</code> setting"
					}
				]
			},
			{
				"tag": "p",
				"content": "The image condition is difficult to set - it's a compromise between image quality and how long it takes to load that image.  Modern responsive image tools include CDNs made specifically for this purpose and using the <code class='inline-code'>srcset</code> attribute within <code class='inline-code'>&lt;img&gt;</code> elements to import specifc image files based on the current window size."
			},
			{
				"tag": "h4",
				"content": "Number formatting"
			},
			{
				"tag": "p",
				"content": "The numeric data in the JSON file pulled from the API is in string format — and when it’s stored in local storage, will remain in string format.  The numbers needed to be formatted in currency and fixed to two decimal places — but the <code class='inline-code'>.toFixed()</code> method can’t be used on strings."
			},
			{
				"tag": "h3",
				"content": "Conclusion"
			},
			{
				"tag": "p",
				"content": "The most important aspect of building any protoype is to give proper attention and care to the planning phase. By breaking up a project into components with definable \"touch points\" to signal the end of one task and the start of another, it's easier not only to define those tasks but also to delegate those tasks to people with the subject-matter expertise to handle them.  This project, at its highest level, can be broken up into two phases - \"everything before the code\" and \"the coding phase\". The first phase involves research, visual design, researching UI prototypes, and writing as much pseudocode as possible (for by doing this one is actually writing out a lot of the logic for each of the components of the prototype -- and this, if the developer plays their cards right -- will be easily transferable into whatever language they're working in!"
			}
		]
	}
]